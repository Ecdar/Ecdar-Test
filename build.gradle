buildscript {
    ext.kotlin_version = '+'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url 'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.google.protobuf' version '0.9.2'
    id "com.diffplug.spotless" version "6.19.0"
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'antlr'

repositories {
    mavenLocal()
    mavenCentral()
}

def grpcVersion = '1.52.1' // CURRENT_GRPC_VERSION
def protobufVersion = '3.17.3'
def protocVersion = protobufVersion

dependencies {
    api 'org.junit.jupiter:junit-jupiter:5.7.0'
    antlr "org.antlr:antlr4:4.9.1"
    api "org.antlr:antlr4-runtime:4.9.1"
    api 'com.google.protobuf:protobuf-java:3.19.6'
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation 'junit:junit:4.13.1'
    api 'com.beust:klaxon:5.5'
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    //GRPC:
    api "io.grpc:grpc-protobuf:$grpcVersion"
    api "io.grpc:grpc-stub:$grpcVersion"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    // Plotting
    api "org.jetbrains.lets-plot:lets-plot-kotlin-jvm:3.2.0"
    api "org.slf4j:slf4j-simple:1.7.36"  // Enable logging to console


    // examples/advanced need this for JsonFormat
    api "com.google.protobuf:protobuf-java-util:$protobufVersion"

    runtimeOnly "io.grpc:grpc-netty-shaded:$grpcVersion"

    testImplementation "io.grpc:grpc-testing:$grpcVersion"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.plugins { grpc {} }
        }
    }
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-visitor', '-package', 'parser']
    outputDirectory = new File("src/main/java/parser".toString())
}
compileKotlin.dependsOn generateGrammarSource

sourceSets {
    generated {
        java.srcDir 'src/main/java/'
    }

    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        proto {
            srcDirs 'src/main/Ecdar-ProtoBuf'
        }
    }
}

// show results when running gradlew test
test {
    useJUnitPlatform()
    systemProperties["junit.jupiter.execution.parallel.enabled"] = true
    systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
    maxParallelForks = Runtime.getRuntime().availableProcessors()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

spotless {
    kotlin {
        ktfmt('0.44').dropboxStyle()
    }
}
